import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * This script converts numeric product IDs in categories JSON to ObjectId format
 * using the mapping file generated by convert_products_to_objectids.mjs
 *
 * Input:
 *   - Categories JSON file with numeric product IDs like [4263, 4252, ...]
 *   - Mapping file from product conversion (product-id-mapping.json)
 * Output: JSON file with ObjectId references like [{"$oid": "..."}, ...]
 *
 * Usage: node convert_categories_to_objectids.mjs <input-file> <mapping-file> <output-file>
 */

// Get command line arguments
const args = process.argv.slice(2);
if (args.length < 3) {
  console.error('Usage: node convert_categories_to_objectids.mjs <input-file> <mapping-file> <output-file>');
  console.error('Example: node convert_categories_to_objectids.mjs ../../tmp/shira-studio.categories.json ../../tmp/product-id-mapping.json ../../tmp/shira-studio.categories.fixed.json');
  console.error('\nNote: Run convert_products_to_objectids.mjs first to generate the mapping file!');
  process.exit(1);
}

const inputFile = args[0];
const mappingFile = args[1];
const outputFile = args[2];

try {
  console.log(`Reading categories from: ${inputFile}`);
  console.log(`Reading mapping from: ${mappingFile}`);
  
  // Read the input file
  const fileContent = fs.readFileSync(inputFile, 'utf8');
  const categories = JSON.parse(fileContent);
  
  // Read the mapping file
  const mappingContent = fs.readFileSync(mappingFile, 'utf8');
  const idMapping = JSON.parse(mappingContent);
  
  console.log(`Found ${categories.length} categories`);
  console.log(`Loaded ${Object.keys(idMapping).length} product ID mappings`);
  
  let totalProductsConverted = 0;
  let missingMappings = [];
  
  // Process each category
  const convertedCategories = categories.map(category => {
    const converted = { ...category };
    
    // Convert products array if it exists and has numeric values
    if (Array.isArray(converted.products) && converted.products.length > 0) {
      const originalCount = converted.products.length;
      
      // Check if products are numbers (need conversion)
      if (typeof converted.products[0] === 'number') {
        converted.products = converted.products.map(productId => {
          const mappedId = idMapping[productId];
          
          if (!mappedId) {
            missingMappings.push({ category: category.name, productId });
            console.warn(`  ⚠️  No mapping found for product ${productId} in category "${category.name}"`);
            // Still convert using the same algorithm for consistency
            return { $oid: productId.toString(16).padStart(24, '0') };
          }
          
          return { $oid: mappedId };
        });
        
        totalProductsConverted += originalCount;
        console.log(`  ✓ Converted ${originalCount} products in category "${category.name}"`);
      } else {
        console.log(`  - Category "${category.name}" already has ObjectId format`);
      }
    } else if (Array.isArray(converted.products) && converted.products.length === 0) {
      console.log(`  - Category "${category.name}" has no products`);
    }
    
    return converted;
  });
  
  // Write the converted data to output file
  const outputPath = path.resolve(outputFile);
  fs.writeFileSync(outputPath, JSON.stringify(convertedCategories, null, 2), 'utf8');
  
  console.log(`\n✅ Conversion complete!`);
  console.log(`   Total products converted: ${totalProductsConverted}`);
  
  if (missingMappings.length > 0) {
    console.warn(`\n⚠️  Warning: ${missingMappings.length} product IDs had no mapping`);
    console.warn(`   These were converted using the fallback algorithm`);
  }
  
  console.log(`   Output written to: ${outputPath}`);
  console.log(`\nNext steps:`);
  console.log(`1. Backup your current database`);
  console.log(`2. Import products first: mongoimport --db shira-studio --collection products --drop --file <products-fixed.json> --jsonArray`);
  console.log(`3. Import categories: mongoimport --db shira-studio --collection categories --drop --file "${outputPath}" --jsonArray`);
  console.log(`4. Restart your backend server to pick up the changes`);
  
} catch (error) {
  console.error('Error:', error.message);
  process.exit(1);
}